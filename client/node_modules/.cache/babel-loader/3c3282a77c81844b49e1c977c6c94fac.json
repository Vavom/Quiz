{"ast":null,"code":"var _jsxFileName = \"/Users/johnsaf/Documents/code/Quiz/client/src/Quiz.tsx\",\n    _s = $RefreshSig$();\n\nimport { Alert } from \"@mui/material\";\nimport * as React from \"react\";\nimport Questions from \"./Questions\";\nimport Score from \"./Score\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  const [data, setData] = React.useState(null);\n  const [counter, setCounter] = React.useState(0);\n  const [isLastQuestion, setIsLastQuestion] = React.useState(false);\n  const [correctAnswers] = React.useState([]);\n  React.useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(\"https://multiverselearningproducts.github.io/swe/BCS-sample-questions.json\");\n      const data = await res.json();\n      setData(data);\n    };\n\n    getData();\n  }, []);\n  React.useEffect(() => {\n    if (data != null) {\n      if (counter == data.questions.length - 1) {\n        setIsLastQuestion(true);\n      }\n    }\n  }, [counter]);\n\n  if (data != null) {\n    if (counter < data.questions.length) {\n      return /*#__PURE__*/_jsxDEV(Questions, {\n        dataQuestions: data,\n        counter: counter,\n        setCounter: setCounter,\n        isLastQuestion: isLastQuestion,\n        correctAnswers: correctAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Score, {\n        correctAnswers: correctAnswers,\n        dataAnswers: data.correct_answers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: \"No question data!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(Quiz, \"9V5Mx9AN0eY8gdbh2lv0Z1S++no=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/johnsaf/Documents/code/Quiz/client/src/Quiz.tsx"],"names":["Alert","React","Questions","Score","Quiz","data","setData","useState","counter","setCounter","isLastQuestion","setIsLastQuestion","correctAnswers","useEffect","getData","res","fetch","json","questions","length","correct_answers"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,eAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAcA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACM,QAAN,CAA4B,IAA5B,CAAxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACM,QAAN,CAAe,CAAf,CAA9B;AACA,QAAM,CAACG,cAAD,EAAiBC,iBAAjB,IAAsCV,KAAK,CAACM,QAAN,CAAe,KAAf,CAA5C;AACA,QAAM,CAACK,cAAD,IAAmBX,KAAK,CAACM,QAAN,CAAqC,EAArC,CAAzB;AACAN,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,UAAMC,OAAO,GAAG,YAAY;AAC1B,YAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,4EADqB,CAAvB;AAGA,YAAMX,IAAI,GAAG,MAAMU,GAAG,CAACE,IAAJ,EAAnB;AACAX,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAND;;AAOAS,IAAAA,OAAO;AACR,GATD,EASG,EATH;AAWAb,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAIR,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAIG,OAAO,IAAIH,IAAI,CAACa,SAAL,CAAeC,MAAf,GAAwB,CAAvC,EAA0C;AACxCR,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF;AACF,GAND,EAMG,CAACH,OAAD,CANH;;AAQA,MAAIH,IAAI,IAAI,IAAZ,EAAkB;AAChB,QAAIG,OAAO,GAAGH,IAAI,CAACa,SAAL,CAAeC,MAA7B,EAAqC;AACnC,0BACE,QAAC,SAAD;AACE,QAAA,aAAa,EAAEd,IADjB;AAEE,QAAA,OAAO,EAAEG,OAFX;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,cAAc,EAAEC,cAJlB;AAKE,QAAA,cAAc,EAAEE;AALlB;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVD,MAUO;AACL,0BACE,QAAC,KAAD;AACE,QAAA,cAAc,EAAEA,cADlB;AAEE,QAAA,WAAW,EAAEP,IAAI,CAACe;AAFpB;AAAA;AAAA;AAAA;AAAA,cADF;AAMD;AACF,GAnBD,MAmBO;AACL,wBAAO,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;;GA9CuBhB,I;;KAAAA,I","sourcesContent":["import { Alert } from \"@mui/material\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Questions from \"./Questions\";\nimport Score from \"./Score\";\n\nexport type data = {\n  questions: Array<{\n    id: string;\n    question: string;\n    answers: Array<{\n      id: string;\n      answer: string;\n    }>;\n  }>;\n  correct_answers: any;\n};\n\nexport default function Quiz() {\n  const [data, setData] = React.useState<data | null>(null);\n  const [counter, setCounter] = React.useState(0);\n  const [isLastQuestion, setIsLastQuestion] = React.useState(false);\n  const [correctAnswers] = React.useState<Array<string | null>>([]);\n  React.useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(\n        \"https://multiverselearningproducts.github.io/swe/BCS-sample-questions.json\"\n      );\n      const data = await res.json();\n      setData(data);\n    };\n    getData();\n  }, []);\n\n  React.useEffect(() => {\n    if (data != null) {\n      if (counter == data.questions.length - 1) {\n        setIsLastQuestion(true);\n      }\n    }\n  }, [counter]);\n\n  if (data != null) {\n    if (counter < data.questions.length) {\n      return (\n        <Questions\n          dataQuestions={data}\n          counter={counter}\n          setCounter={setCounter}\n          isLastQuestion={isLastQuestion}\n          correctAnswers={correctAnswers}\n        />\n      );\n    } else {\n      return (\n        <Score\n          correctAnswers={correctAnswers}\n          dataAnswers={data.correct_answers}\n        />\n      );\n    }\n  } else {\n    return <Alert severity=\"error\">No question data!!</Alert>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}