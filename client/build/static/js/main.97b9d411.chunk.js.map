{"version":3,"sources":["Question.tsx","Questions.tsx","Score.tsx","Quiz.tsx","App.tsx","index.tsx"],"names":["Question","questionData","correctAnswers","counter","console","log","React","value","setValue","FormLabel","component","question","RadioGroup","name","onChange","event","target","answers","map","answer","FormControlLabel","id","control","Radio","label","Questions","dataQuestions","setCounter","isLastQuestion","questions","Button","sx","mt","mr","onClick","variant","Score","dataAnswers","score","i","length","Alert","severity","Quiz","data","setData","setIsLastQuestion","getData","a","fetch","res","json","correct_answers","App","startTest","setStartTest","button","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97b9d411.chunk.js","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n} from \"@mui/material\";\nimport * as React from \"react\";\n\ntype question = {\n  id: string;\n  question: string;\n  answers: Array<{\n    id: string;\n    answer: string;\n  }>;\n};\n\ntype props = {\n  questionData: question;\n  correctAnswers: Array<string | null>;\n  counter: number;\n};\n\nexport default function Question({\n  questionData,\n  correctAnswers,\n  counter,\n}: props) {\n  console.log(\"hello\");\n  const [value, setValue] = React.useState(correctAnswers[counter]);\n\n  const handleRadioChange = (event: any) => {\n    setValue(event.target.value);\n    correctAnswers[counter] = event.target.value ?? null;\n  };\n\n  React.useEffect(() => {\n    setValue(correctAnswers[counter]);\n  });\n\n  console.log(correctAnswers);\n\n  return (\n    <>\n      <FormLabel component=\"legend\">{questionData.question}</FormLabel>\n      <RadioGroup\n        aria-label=\"quiz\"\n        name=\"quiz\"\n        value={value}\n        onChange={handleRadioChange}\n      >\n        {questionData.answers.map((answer) => {\n          return (\n            <FormControlLabel\n              value={answer.id}\n              key={answer.id}\n              control={<Radio />}\n              label={answer.answer}\n            />\n          );\n        })}\n      </RadioGroup>\n    </>\n  );\n}\n","import {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n} from \"@mui/material\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Question from \"./Question\";\nimport { data } from \"./Quiz\";\n\ntype props = {\n  dataQuestions: data;\n  counter: number;\n  setCounter: React.Dispatch<React.SetStateAction<number>>;\n  isLastQuestion: boolean;\n  correctAnswers: Array<string | null>;\n};\n\nexport default function Questions({\n  dataQuestions,\n  counter,\n  setCounter,\n  isLastQuestion,\n  correctAnswers,\n}: props) {\n  if (correctAnswers[counter] == null) {\n    correctAnswers[counter] = null;\n  }\n\n  return (\n    <>\n      <Question\n        questionData={dataQuestions.questions[counter]}\n        correctAnswers={correctAnswers}\n        counter={counter}\n      />\n      {counter > 0 ? (\n        <Button\n          sx={{ mt: 1, mr: 1 }}\n          onClick={() => {\n            setCounter(counter - 1);\n          }}\n          variant=\"outlined\"\n        >\n          Previous Question\n        </Button>\n      ) : null}\n      <Button\n        sx={{ mt: 1, mr: 1 }}\n        onClick={() => {\n          setCounter(counter + 1);\n        }}\n        variant=\"outlined\"\n      >\n        {isLastQuestion ? \"Finish\" : \"Next Question\"}\n      </Button>\n    </>\n  );\n}\n","import { Alert } from \"@mui/material\";\n\ntype props = {\n  correctAnswers: Array<string | null>;\n  dataAnswers: any;\n};\n\nexport default function Score({ correctAnswers, dataAnswers }: props) {\n  let score = 0;\n\n  for (let i = 0; i < correctAnswers.length; i++) {\n    if (correctAnswers[i] === dataAnswers[\"q\" + (i + 1)]) {\n      score++;\n    }\n  }\n\n  return (\n    <Alert severity=\"error\">\n      {score} / {correctAnswers.length}\n    </Alert>\n  );\n}\n","import { Alert } from \"@mui/material\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Questions from \"./Questions\";\nimport Score from \"./Score\";\n\nexport type data = {\n  questions: Array<{\n    id: string;\n    question: string;\n    answers: Array<{\n      id: string;\n      answer: string;\n    }>;\n  }>;\n  correct_answers: any;\n};\n\nexport default function Quiz() {\n  const [data, setData] = React.useState<data | null>(null);\n  const [counter, setCounter] = React.useState(0);\n  const [isLastQuestion, setIsLastQuestion] = React.useState(false);\n  const [correctAnswers] = React.useState<Array<string | null>>([]);\n  React.useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(\n        \"https://multiverselearningproducts.github.io/swe/BCS-sample-questions.json\"\n      );\n      const data = await res.json();\n      setData(data);\n    };\n    getData();\n  }, []);\n\n  React.useEffect(() => {\n    if (data != null) {\n      if (counter == data.questions.length - 1) {\n        setIsLastQuestion(true);\n      }\n    }\n  }, [counter]);\n\n  if (data != null) {\n    if (counter < data.questions.length) {\n      return (\n        <Questions\n          dataQuestions={data}\n          counter={counter}\n          setCounter={setCounter}\n          isLastQuestion={isLastQuestion}\n          correctAnswers={correctAnswers}\n        />\n      );\n    } else {\n      return (\n        <Score\n          correctAnswers={correctAnswers}\n          dataAnswers={data.correct_answers}\n        />\n      );\n    }\n  } else {\n    return <Alert severity=\"error\">No question data!!</Alert>;\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Button from \"@mui/material/Button\";\nimport Quiz from \"./Quiz\";\n\nexport default function App() {\n  const [startTest, setStartTest] = React.useState(false);\n  const button = (\n    <Button\n      variant=\"contained\"\n      onClick={() => {\n        setStartTest(true);\n      }}\n    >\n      Start Test\n    </Button>\n  );\n  const quiz = <Quiz />;\n  return !startTest ? button : quiz;\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}