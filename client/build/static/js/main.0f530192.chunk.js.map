{"version":3,"sources":["Question.tsx","Timer.tsx","Questions.tsx","CustomPaginationActionsTable.tsx","Scoreboard.tsx","Score.tsx","Quiz.tsx","App.tsx","index.tsx"],"names":["Questions","questionData","correctAnswers","counter","React","value","setValue","FormLabel","id","component","question","Divider","variant","sx","marginTop","marginBottom","RadioGroup","name","onChange","event","target","answers","map","answer","FormControlLabel","control","Radio","label","Timer","calculateTimeLeft","Date","getFullYear","timeLeftMs","startTime","now","minutes","Math","floor","seconds","timeLeft","setTimeLeft","setTimeout","timerComponents","Object","entries","forEach","unitValue","push","length","dataQuestions","setCounter","isLastQuestion","Container","height","minWidth","bgcolor","Box","display","flexDirection","alignItems","Card","maxWidth","borderRadius","left","top","right","bottom","position","p","justifyContent","questions","Typography","Button","mt","mr","onClick","TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","flexShrink","ml","IconButton","disabled","direction","ceil","max","CustomPaginationActionsTable","rows","setPage","setRowsPerPage","emptyRows","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","row","scope","username","style","width","score","time","indexOf","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","ActionsComponent","Scoreboard","setPostFailed","useState","setRows","loadingFailed","setLoadingFailed","hasSumbitted","setHasSubmitted","isAcceptableUsername","setIsAcceptableUsername","setUsername","helperText","setHelperText","useEffect","fetch","then","res","json","scores","millitotime","catch","err","millis","console","log","Number","miliseconds","percentage","partialValue","totalValue","Alert","severity","zIndex","paddingTop","paddingBottom","round","ans","getSkipped","TextField","error","alignSelf","sendData","method","headers","body","JSON","stringify","overflow","Score","dataAnswers","postFailed","i","Quiz","data","setData","setIsLastQuestion","setStartTime","completionTime","setCompletionTime","correct_answers","App","startTest","setStartTest","button","textAlign","createTheme","palette","primary","main","secondary","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.0f530192.chunk.js","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  Box,\n  Divider,\n} from \"@mui/material\";\nimport * as React from \"react\";\n\ntype question = {\n  id: string;\n  question: string;\n  answers: Array<{\n    id: string;\n    answer: string;\n  }>;\n};\n\ntype props = {\n  questionData: question;\n  correctAnswers: Array<string | null>;\n  counter: number;\n};\n\nexport default function Questions({\n  questionData,\n  correctAnswers,\n  counter,\n}: props) {\n  const [value, setValue] = React.useState(correctAnswers[counter]);\n  const [error, setError] = React.useState(false);\n  const [helperText, setHelperText] = React.useState(\"Choose wisely\");\n\n  const handleRadioChange = (event: any) => {\n    setValue(event.target.value);\n    correctAnswers[counter] = event.target.value ?? null;\n  };\n\n  React.useEffect(() => {\n    setValue(correctAnswers[counter]);\n  });\n\n  return (\n    <>\n      <FormLabel id=\"cy-question\" component=\"legend\">\n        {questionData.question}\n      </FormLabel>\n      <Divider\n        variant=\"middle\"\n        sx={{ marginTop: \"10px\", marginBottom: \"10px\" }}\n      />\n      <RadioGroup\n        aria-label=\"quiz\"\n        id=\"cy-ans\"\n        name=\"quiz\"\n        value={value}\n        onChange={handleRadioChange}\n      >\n        {questionData.answers.map((answer) => {\n          return (\n            <FormControlLabel\n              value={answer.id}\n              key={answer.id}\n              control={<Radio />}\n              label={answer.answer}\n            />\n          );\n        })}\n      </RadioGroup>\n    </>\n  );\n}\n","import * as React from \"react\";\n\ntype timeLeft ={\n    minutes: number;\n    seconds: number;\n}\n\n\nexport default function Timer() {\n\n    const calculateTimeLeft = ():timeLeft => {\n        let year = new Date().getFullYear();\n        let timeLeftMs = startTime - Date.now() + 2400000\n        let timeLeft\n\n        if (timeLeftMs > 0) {\n            timeLeft = {\n                minutes: Math.floor((timeLeftMs / 1000 / 60) % 60),\n                seconds: Math.floor((timeLeftMs / 1000) % 60),\n            };\n        }else{\n            timeLeft = {minutes:0,seconds:0}\n        }\n        return timeLeft;\n    };\n\n    const [startTime,setStartTime] = React.useState(Date.now());\n    const [timeLeft, setTimeLeft] = React.useState(calculateTimeLeft());\n    const [year] = React.useState(new Date().getFullYear());\n\n\n      React.useEffect(() => {\n        setTimeout(() => {\n          setTimeLeft(calculateTimeLeft());\n        }, 1000);\n      });\n\n    const timerComponents: Array<React.ReactChild> = [];\n\n  Object.entries(timeLeft).forEach((unitValue) => {\n    timerComponents.push(\n      <span key={unitValue[0]}>\n        {unitValue[1]} {unitValue[0]}{\" \"}\n      </span>\n    );\n  });\n    return(\n        <>\n        {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n        </>\n    )\n  }\n","import {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Box,\n  Stack,\n  Container,\n  Typography,\n} from \"@mui/material\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Question from \"./Question\";\nimport { data } from \"./Quiz\";\nimport Timer from \"./Timer\";\n\ntype props = {\n  dataQuestions: data;\n  counter: number;\n  setCounter: React.Dispatch<React.SetStateAction<number>>;\n  isLastQuestion: boolean;\n  correctAnswers: Array<string | null>;\n};\n\nexport default function Questions({\n  dataQuestions,\n  counter,\n  setCounter,\n  isLastQuestion,\n  correctAnswers,\n}: props) {\n  const [isComplete, setIscomplete] = React.useState(false);\n  if (correctAnswers[counter] == null) {\n    correctAnswers[counter] = null;\n  }\n\n  return (\n    <Container\n      sx={{ height: \"100vh\", minWidth: \"100%\", bgcolor: \"primary.main\" }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Card\n          sx={{\n            maxWidth: \"37%\",\n            borderRadius: \"16px\",\n            left: \"32%\",\n            top: \"25%\",\n            right: \"32%\",\n            bottom: \"37%\",\n            position: \"absolute\",\n            p: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"space-around\",\n              }}\n            >\n              <Box sx={{}}>\n                <Question\n                  questionData={dataQuestions.questions[counter]}\n                  correctAnswers={correctAnswers}\n                  counter={counter}\n                />\n              </Box>\n            </Box>\n          </Box>\n        </Card>\n        <Card\n          sx={{\n            maxWidth: \"37%\",\n            borderRadius: \"16px\",\n            p: 1,\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            marginTop: \"20px\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"space-around\",\n              }}\n            >\n              <Box>\n                <Typography variant=\"button\">\n                  {counter > 0 ? (\n                    <Button\n                      sx={{ mt: 1, mr: 1, bgcolor: \"secondary.main\" }}\n                      onClick={() => {\n                        setCounter(counter - 1);\n                      }}\n                      variant=\"contained\"\n                    >\n                      Previous Question\n                    </Button>\n                  ) : null}\n                  <Timer />\n                  <Button\n                    sx={{ mt: 1, mr: 1, bgcolor: \"secondary.main\" }}\n                    onClick={() => {\n                      setCounter(counter + 1);\n                    }}\n                    variant=\"contained\"\n                  >\n                    {isLastQuestion ? \"Finish\" : \"Next Question\"}\n                  </Button>\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n        </Card>\n      </Box>\n    </Container>\n  );\n}\n","import * as React from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableFooter from \"@mui/material/TableFooter\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\nimport { rows } from \"./Scoreboard\";\nimport { TableHead } from \"@mui/material\";\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onPageChange: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void;\n}\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n}\n\ntype props = {\n  rows: rows;\n};\n\nexport default function CustomPaginationActionsTable({ rows }: props) {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell align=\"right\">Score</TableCell>\n            <TableCell align=\"right\">TIme</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={rows.indexOf(row)}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.username}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.score}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.time}\n              </TableCell>\n            </TableRow>\n          ))}\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: {\n                  \"aria-label\": \"rows per page\",\n                },\n                native: true,\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport {\n  Alert,\n  Button,\n  FormLabel,\n  TablePagination,\n  TextField,\n} from \"@mui/material\";\nimport CustomPaginationActionsTable from \"./CustomPaginationActionsTable\";\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Container,\n  Box,\n  Typography,\n} from \"@mui/material\";\nimport zIndex from \"@mui/material/styles/zIndex\";\n\ntype props = {\n  score: number;\n  time: number;\n  setPostFailed: React.Dispatch<React.SetStateAction<boolean>>;\n  correctAnswers: (string | null)[];\n};\n\ntype row = {\n  username: string;\n  score: number;\n  time: string;\n};\n\nexport type rows = Array<row>;\n\nexport default function Scoreboard({\n  score,\n  time,\n  setPostFailed,\n  correctAnswers,\n}: props) {\n  const [rows, setRows] = React.useState<Array<row>>([]);\n  const [loadingFailed, setLoadingFailed] = React.useState(false);\n  const [hasSumbitted, setHasSubmitted] = React.useState<boolean>(false);\n  const [isAcceptableUsername, setIsAcceptableUsername] =\n    React.useState<boolean>(true);\n  const [username, setUsername] = React.useState<string>(\"\");\n  const [helperText, setHelperText] = React.useState<string>(\"\");\n\n  const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(event.target.value);\n    setIsAcceptableUsername(true);\n    setHelperText(\"\");\n  };\n\n  const handleSubmit = () => {\n    if (username.length == 0) {\n      setIsAcceptableUsername(false);\n      setHelperText(\"Username must exist\");\n      return;\n    }\n    const sendData = { username, score, time };\n    setHasSubmitted(true);\n    fetch(\"/scores\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(sendData),\n    }).catch((err) => setPostFailed(true));\n  };\n\n  React.useEffect(() => {\n    fetch(\"/scores\")\n      .then((res) => res.json())\n      .then((res) => {\n        res.scores.forEach((score: row) => {\n          score.time = millitotime(score.time);\n        });\n        setRows(res.scores);\n      })\n      .catch((err) => setLoadingFailed(true));\n  }, [hasSumbitted]);\n\n  const millitotime = (millis: string) => {\n    console.log(millis);\n    let minutes = Math.floor(Number(millis) / 60000);\n    let seconds: number = Math.floor((Number(millis) % 60000) / 1000);\n    let miliseconds: number = Number(millis) % 1000;\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}.${\n      miliseconds < 10 ? \"0\" : \"\"\n    }${miliseconds < 100 ? \"0\" : \"\"}${miliseconds}`;\n  };\n\n  function percentage(partialValue: number, totalValue: number) {\n    return (100 * partialValue) / totalValue;\n  }\n\n  function getSkipped() {\n    let counter = 0;\n    correctAnswers.map((ans) => {\n      if (ans == null) {\n        counter++;\n      }\n    });\n    return counter;\n  }\n\n  if (rows !== null || !loadingFailed) {\n    return (\n      <Container\n        sx={{\n          height: \"100vh\",\n          minWidth: \"100%\",\n          bgcolor: \"primary.main\",\n          zIndex: \"-1\",\n        }}\n      >\n        <Box\n          sx={{\n            top: \"10%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            paddingTop: \"20px\",\n            paddingBottom: \"40px\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Typography\n              sx={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n              }}\n              variant=\"h1\"\n            >\n              Highscores!\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n                paddingTop: \"20px\",\n              }}\n            >\n              {score} / {correctAnswers.length} Percentage ={\" \"}\n              {Math.round(percentage(score, correctAnswers.length))}%{\" \"}\n              {Math.round(percentage(score, correctAnswers.length)) >= 65\n                ? \"Pass\"\n                : \"Better Luck Next Time\"}\n            </Typography>\n            <Typography\n              variant=\"h4\"\n              sx={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"center\",\n                paddingTop: \"20px\",\n              }}\n            >\n              {\"Skipped questions: \" + getSkipped()}\n            </Typography>\n            {!hasSumbitted && (\n              <>\n                <FormLabel component=\"legend\">\n                  Would you like to submit your score?\n                </FormLabel>\n                <TextField\n                  id=\"username\"\n                  label=\"Name\"\n                  value={username}\n                  onChange={handleUsernameChange}\n                  error={!isAcceptableUsername}\n                  helperText={helperText}\n                />\n                <Button\n                  sx={{\n                    mt: 1,\n                    mr: 1,\n                    bgcolor: \"secondary.main\",\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    alignSelf: \"center\",\n                  }}\n                  onClick={handleSubmit}\n                  variant=\"contained\"\n                  id=\"cy-button\"\n                >\n                  Submit\n                </Button>\n              </>\n            )}\n            <Card>\n              <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n                <CustomPaginationActionsTable rows={rows} />\n              </Paper>\n            </Card>\n          </Box>\n        </Box>\n      </Container>\n    );\n  } else {\n    return <Alert severity=\"error\">No results data!</Alert>;\n  }\n}\n","import { Alert, TextField, FormLabel, Button } from \"@mui/material\";\nimport * as React from \"react\";\nimport Scoreboard from \"./Scoreboard\";\n\ntype props = {\n  correctAnswers: Array<string | null>;\n  dataAnswers: any;\n  time: number;\n};\n\nexport default function Score({ correctAnswers, dataAnswers, time }: props) {\n  const [postFailed, setPostFailed] = React.useState(false);\n\n  let score = 0;\n\n  for (let i = 0; i < correctAnswers.length; i++) {\n    if (correctAnswers[i] === dataAnswers[\"q\" + (i + 1)]) {\n      score++;\n    }\n  }\n\n  //calculating percentage\n  function percentage(partialValue: number, totalValue: number) {\n    return (100 * partialValue) / totalValue;\n  }\n\n  const totalQuestions = correctAnswers.length;\n  const correctAns = score;\n  const passPercentage = 65;\n\n  const submitScore = () => {\n    return (\n      <>\n        <Scoreboard\n          score={score}\n          time={time}\n          setPostFailed={setPostFailed}\n          correctAnswers={correctAnswers}\n        />\n        ;\n      </>\n    );\n  };\n\n  // console.log(percentage(correctAns, totalQuestions));\n  // const alert = () => {\n  //   if (!postFailed) {\n  //     if (percentage(correctAns, totalQuestions) >= passPercentage) {\n  //       return (\n  //         <>\n  //           <Alert severity=\"success\">\n  //             {score} / {correctAnswers.length} Percentage ={\" \"}\n  //             {Math.round(percentage(correctAns, totalQuestions))}% Pass\n  //           </Alert>\n  //         </>\n  //       );\n  //     } else {\n  //       return (\n  //         <>\n  //           <Alert severity=\"error\">\n  //             {score} / {correctAnswers.length} Percentage ={\" \"}\n  //             {Math.round(percentage(correctAns, totalQuestions))}% Better Luck\n  //             Next Time\n  //           </Alert>\n  //         </>\n  //       );\n  //     }\n  //   } else {\n  //     return <Alert severity=\"error\">Cannot submit data!!</Alert>;\n  //   }\n  // };\n  return <>{!postFailed && submitScore()}</>;\n}\n","import { Alert } from \"@mui/material\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Questions from \"./Questions\";\nimport Score from \"./Score\";\n\nexport type data = {\n  questions: Array<{\n    id: string;\n    question: string;\n    answers: Array<{\n      id: string;\n      answer: string;\n    }>;\n  }>;\n  correct_answers: any;\n};\n\nexport default function Quiz() {\n  const [data, setData] = React.useState<data | null>(null);\n  const [counter, setCounter] = React.useState(0);\n  const [isLastQuestion, setIsLastQuestion] = React.useState(false);\n  const [correctAnswers] = React.useState<Array<string | null>>([]);\n  const [loadingFailed, setLoadingFailed] = React.useState(false);\n  const [startTime,setStartTime] = React.useState(Date.now())\n  const [completionTime, setCompletionTime] = React.useState(999999999999999999)\n\n  React.useEffect(() => {\n    const getData = () => {\n      fetch(\n        \"https://multiverselearningproducts.github.io/swe/BCS-sample-questions.json\"\n      )\n        .then((res) => res.json())\n        .then((data) => setData(data))\n        .catch((err) => setLoadingFailed(true));\n    };\n    getData();\n  }, []);\n\n  React.useEffect(() => {\n    if (data != null) {\n      if (counter == data.questions.length - 1) {\n        setIsLastQuestion(true);\n      }\n      if(counter == data.questions.length){\n        setCompletionTime(Date.now()-startTime)\n      }\n    }\n  }, [counter]);\n\n  React.useEffect(()=>{\n    setStartTime(Date.now())\n  },[data])\n\n  if (data != null) {\n    if (counter < data.questions.length) {\n\n      return (\n        <>\n        <Questions\n          dataQuestions={data}\n          counter={counter}\n          setCounter={setCounter}\n          isLastQuestion={isLastQuestion}\n          correctAnswers={correctAnswers}\n        />\n        </>\n      );\n    } else {\n      return (\n        <Score\n          correctAnswers={correctAnswers}\n          dataAnswers={data.correct_answers}\n          time={completionTime}\n        />\n      );\n    }\n  } else if (loadingFailed) {\n    return <Alert severity=\"error\">No question data!!</Alert>;\n  } else {\n    return <div>loading...</div>;\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Button from \"@mui/material/Button\";\nimport Quiz from \"./Quiz\";\nimport { Container, Card, Box, Typography } from \"@mui/material\";\n\nexport default function App() {\n  const [startTest, setStartTest] = React.useState(false);\n  const button = (\n    <Container\n      sx={{ height: \"100vh\", minWidth: \"100%\", bgcolor: \"primary.main\" }}\n    >\n      <Card\n        sx={{\n          maxWidth: \"37%\",\n          borderRadius: \"16px\",\n          left: \"32%\",\n          top: \"25%\",\n          right: \"32%\",\n          bottom: \"37%\",\n          position: \"absolute\",\n          p: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Typography sx={{ textAlign: \"center\", width: \"600px\" }}>\n              Welcome to the Quiz by Quizz You will have 40 minutes to answer\n              all the questions. You will have 25 questions to complete.\n              Remember to go back and change your answer at any time. Remember\n              to leave some time at the end to check your answers.\n            </Typography>\n            <Button\n              sx={{ mt: 1, mr: 1, bgcolor: \"secondary.main\" }}\n              variant=\"contained\"\n              onClick={() => {\n                setStartTest(true);\n              }}\n            >\n              Start Test\n            </Button>\n          </Box>\n        </Box>\n      </Card>\n    </Container>\n  );\n  const quiz = <Quiz />;\n  return !startTest ? button : quiz;\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n\n  palette: {\n    primary: {\n        main: '#CAF0FF',\n    },\n    secondary: {\n        main: '#FFD9CA',\n    },\n  },\n});\n\nReactDOM.render(<ThemeProvider theme={theme}><App /></ThemeProvider>, document.getElementById(\"root\"));\n"],"sourceRoot":""}